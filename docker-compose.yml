version: '3.8'

services:
  analytics-hub:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: enterprise-analytics-hub
    ports:
      - "5000:5000"
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY:-gsk_default_key}
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_PORT=5000
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - PYTHONPATH=/app
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - analytics-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.analytics-hub.rule=Host(`analytics.localhost`)"
      - "traefik.http.services.analytics-hub.loadbalancer.server.port=5000"

  # Optional: PostgreSQL database for production use
  postgres:
    image: postgres:15-alpine
    container_name: analytics-postgres
    environment:
      - POSTGRES_DB=analytics
      - POSTGRES_USER=analytics_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-change_me_in_production}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analytics_user -d analytics"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - analytics-network
    profiles:
      - production

  # Optional: Redis for session management and caching
  redis:
    image: redis:7-alpine
    container_name: analytics-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - analytics-network
    profiles:
      - production

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: analytics-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - analytics-hub
    restart: unless-stopped
    networks:
      - analytics-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  analytics-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
